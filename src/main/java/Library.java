import java.util.Date;
import java.util.Random;
import java.util.concurrent.CompletableFuture;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
	
	public static int threadPoolCount = 4;
	public boolean someLibraryMethod() {
		return true;
	}

	public static void main(String[] args) {
		thenAcceptExample();
	}

	static void thenAcceptExample() {

		StringBuilder result = new StringBuilder();
		
		try {
			get3();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		System.out.println(Thread.currentThread().getName() + ": This is printed");

	}

	public static void get3() throws InterruptedException {
		System.out.println(Thread.currentThread().getName() + ": Entering G3()");
		for (int i = 0; i < 10; i++) {
			Thread.sleep(3);
			threadPoolCount--;
			CompletableFuture.supplyAsync(() -> {
				try {
					String s = camo();
					System.out.println(Thread.currentThread().getName() + ": camo Call returned response");
					return s;
				} catch (InterruptedException e) {
					e.printStackTrace();
					return "";
				}
			}).thenApply(res -> {
				try {
					String s = ewallet(res);
					System.out.println(Thread.currentThread().getName() + ": Ewallet Call ended with result "+s);
					return s;
				} catch (InterruptedException e) {
					e.printStackTrace();
					return "";
				}
			}).thenRun(()->{
				threadPoolCount++;
			});
			
			while(threadPoolCount<=0){
				Thread.sleep(1000);
			}
		}
		System.out.println(Thread.currentThread().getName() + ": Exiting G3()");
	}
	

	public static String camo() throws InterruptedException {
		System.out.println(Thread.currentThread().getName() + ": Entering camo()");
		Date dt = new Date();
		Thread.sleep(4000);
		System.out.println(Thread.currentThread().getName() + ": Finished camo");
		return dt.toString();
	}
	
	public static String ewallet(String s) throws InterruptedException {
		System.out.println(Thread.currentThread().getName() + ": Entering ewallet()");
		int tms = (new Random()).nextInt();
		Thread.sleep(5000);
		System.out.println(Thread.currentThread().getName() + ": Finished ewallet");
		return s+(tms%2==0?" is valid ewallet":" is invalid ewallet");
	}
	
	
	
	
	
	
	
	
	
	
	

	public static void get2() {
		System.out.println(Thread.currentThread().getName() + ": Entering get2()");
		for (int i = 0; i < 3; i++) {
			CompletableFuture.runAsync(() -> {
				try {
					String s = camo();
					System.out.println(Thread.currentThread().getName() + ": API Call ended");
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			});
		}
	}

	public static CompletableFuture<String> get() {
		return CompletableFuture.supplyAsync(() -> {
			try {
				String s = camo();
				System.out.println(Thread.currentThread().getName() + ": API Call ended");
				return s;
			} catch (InterruptedException e) {
				e.printStackTrace();
				return "";
			}
		});
	}

}
